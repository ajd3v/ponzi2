// Code generated by go-bindata.
// sources:
// data/roundedCornerNE.ply
// data/roundedCornerNW.ply
// data/roundedCornerSE.ply
// data/roundedCornerSW.ply
// DO NOT EDIT!

package ponzi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _roundedcornernePly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x61\x6a\xc3\x30\x0c\x85\xff\x0b\x74\x07\x5d\xa0\xc1\xb2\x9d\x75\x3b\xcd\xf0\x1a\xb5\x0d\xb8\x4e\xd0\xdc\x91\xec\xf4\x83\xb1\x65\x06\x6d\x3f\x32\x83\xe1\xf1\x59\xef\x59\x6f\xce\x2b\xc2\x79\xd2\x5b\xaa\x94\x5e\x4f\xe3\x48\xdc\x39\x04\xc9\x72\x93\x52\xe9\x4d\xb4\xca\x42\x3d\xc2\xac\xd3\x2c\x5a\x57\x3a\xe7\x29\x55\x5a\x0c\x59\x0d\x79\x37\xa4\x58\x5b\xb1\xbe\xd2\x1a\xef\xa7\x6b\x52\x52\x19\x0c\xbb\xa8\x48\x31\xf4\x25\xdf\xe5\x67\x7f\x19\x2e\x42\xb1\x19\x1a\xb7\x52\xfc\x2b\xf5\x08\x52\x86\xe7\xab\xa4\x41\x14\x81\x3b\xf7\x79\xe8\xb0\x29\xf7\xb7\xd8\x66\x7c\xdf\x7f\x5f\x04\xd7\x3d\xc6\xe3\xb1\x7f\xa2\x83\xeb\x7c\x88\x0f\x21\xfc\x27\x23\x72\xf4\x1c\xa9\x11\x3b\x23\xda\xdf\xbf\x16\xda\x9f\xc1\xe6\x7d\x7f\x15\x62\x04\x26\x8f\xe0\x29\x20\x04\x8a\x1f\x01\x00\x00\xff\xff\x38\xb4\x4f\x66\x84\x02\x00\x00")

func roundedcornernePlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornernePly,
		"roundedCornerNE.ply",
	)
}

func roundedcornernePly() (*asset, error) {
	bytes, err := roundedcornernePlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerNE.ply", size: 644, mode: os.FileMode(438), modTime: time.Unix(1504804099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _roundedcornernwPly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x5d\x4a\xc0\x30\x10\x84\xdf\xf7\x14\x7b\x81\x86\xfc\x5a\x3d\x8d\xc4\x66\xfb\x03\x69\x5a\xd6\x54\x5a\x4f\x2f\x88\xc6\x92\xea\x43\x0d\x04\x86\x8f\x9d\xc9\x64\xd7\x78\x40\xbf\xf0\xec\x33\xfa\xd7\x6e\x9a\x50\x09\x09\x14\x69\xa6\x94\xf1\x8d\x38\xd3\x8e\x0e\x56\x5e\x56\xe2\x7c\x60\x1f\x17\x9f\x71\xaf\xc1\x51\x83\xf7\x1a\xa4\x8b\x27\x5d\x4c\xe9\xe4\xda\xba\xd1\x33\x32\x85\x1a\x0d\x4c\x94\x6a\xf8\x12\x37\x2a\xad\x29\x0c\x84\xf6\x67\x64\x2a\x3f\x51\xbf\x41\x0d\x94\xc2\xf3\x48\x3e\x10\x83\x12\xf2\xf3\x60\x11\xf2\x6f\x51\x66\xb4\x73\xdf\x17\xa4\xd0\xc6\x3e\x18\x83\x52\x3c\xda\xb6\x75\x4f\xb7\x13\x1a\x29\xac\xb2\x5a\x59\x3c\x89\xdb\x11\x5f\x8f\x37\xa7\x3e\x37\x33\x0a\x6d\xfe\xbf\x0c\x54\xa0\x50\x83\x46\x03\x06\xed\x47\x00\x00\x00\xff\xff\x41\x5c\x8f\xc5\x6d\x02\x00\x00")

func roundedcornernwPlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornernwPly,
		"roundedCornerNW.ply",
	)
}

func roundedcornernwPly() (*asset, error) {
	bytes, err := roundedcornernwPlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerNW.ply", size: 621, mode: os.FileMode(438), modTime: time.Unix(1504803816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _roundedcornersePly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x61\x6a\xc3\x30\x0c\x85\xff\x0b\x74\x07\x5d\x20\xc6\xb2\x9d\x75\x3b\xcd\xf0\x1a\xb5\x0d\xa4\x4e\xd0\xdc\xd1\xec\xf4\x63\x65\x4b\x03\xda\x7e\xa4\x06\xc3\xe3\xb3\xde\xf3\xd3\x34\xcc\x08\x87\x51\xcf\xb9\x52\x7e\xdf\xf7\x3d\xb1\xf3\x08\x32\xc8\x59\x4a\xa5\x0f\xd1\x2a\x57\x6a\x11\x26\x1d\x27\xd1\x3a\xd3\x61\x18\x73\xa5\xab\x21\xb3\x21\x9f\x86\x14\x6b\x2b\xd6\x57\xd6\xc6\xcb\xfe\x94\x95\x54\x3a\xc3\x8e\x2a\x52\x0c\x7d\x1b\x2e\x72\xef\x2f\xdd\x51\x28\xad\x86\xfa\x65\x29\xfe\x93\x06\x04\x29\xdd\xeb\x49\x72\x27\x8a\xd0\xb0\xf3\xb7\x43\x77\xe5\xff\x17\xcb\x4c\x68\xdb\xdf\x8b\xd0\x78\x17\x62\x7a\x8a\x91\x1a\xef\x9e\xd3\x6e\xd7\xbe\x6c\x0f\xf1\x2e\x71\x0a\x9c\xbe\x33\x6e\x2a\x3e\x92\xb1\xfc\xfe\x53\x68\x73\x04\x9b\xe7\xed\x2d\x88\x11\x98\x02\x42\xa0\x88\x10\x29\x7d\x05\x00\x00\xff\xff\x84\xcc\xae\x78\x85\x02\x00\x00")

func roundedcornersePlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornersePly,
		"roundedCornerSE.ply",
	)
}

func roundedcornersePly() (*asset, error) {
	bytes, err := roundedcornersePlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerSE.ply", size: 645, mode: os.FileMode(438), modTime: time.Unix(1504804351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _roundedcornerswPly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x5d\x6a\xc3\x30\x10\x84\xdf\x17\xf6\x0e\x7b\x01\x0b\xfd\x36\xed\x69\x8a\x1a\x6d\x12\x83\x22\x9b\xad\x52\xe2\x9e\xbe\x50\xa8\x62\x50\xf3\x60\x0b\x04\xc3\xc7\xce\x68\xb4\x73\x5e\x10\x4e\x93\x5c\x63\xa5\xf8\x79\x1c\x47\x32\x4a\x23\x70\xe6\x2b\x97\x4a\x5f\x2c\x95\xef\x14\x10\x66\x99\x66\x96\xba\xd0\x29\x4f\xb1\xd2\xbd\x23\x4b\x47\xbe\x3b\x52\x7a\x5b\xe9\x7d\x65\x6d\xbc\x1d\x2f\x51\x48\x38\x75\xec\x2c\xcc\xa5\xa3\x1f\xf9\xc6\x8f\xfe\x9c\xce\x4c\x7e\x35\x34\xb6\x4f\x99\x7f\xa9\x45\xe0\x92\xde\x2f\x1c\x13\x0b\xc2\x60\x94\xfe\x3d\xd4\x84\x7e\x2e\xda\x8c\x0d\xe1\xef\x22\x0c\x5a\xbd\xfa\xc3\x21\xbc\x91\x56\xd6\xf9\x17\xe7\x76\x65\x78\xe3\xad\xf1\xf4\x50\x9b\x43\xda\xf3\xeb\x46\x1b\x33\x1a\x1d\xf6\x2f\x44\x93\x41\x30\x64\x11\x2c\x39\x04\x47\xfe\x27\x00\x00\xff\xff\x31\xa7\x5f\xc0\x86\x02\x00\x00")

func roundedcornerswPlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornerswPly,
		"roundedCornerSW.ply",
	)
}

func roundedcornerswPly() (*asset, error) {
	bytes, err := roundedcornerswPlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerSW.ply", size: 646, mode: os.FileMode(438), modTime: time.Unix(1504804823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"roundedCornerNE.ply": roundedcornernePly,
	"roundedCornerNW.ply": roundedcornernwPly,
	"roundedCornerSE.ply": roundedcornersePly,
	"roundedCornerSW.ply": roundedcornerswPly,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"roundedCornerNE.ply": &bintree{roundedcornernePly, map[string]*bintree{}},
	"roundedCornerNW.ply": &bintree{roundedcornernwPly, map[string]*bintree{}},
	"roundedCornerSE.ply": &bintree{roundedcornersePly, map[string]*bintree{}},
	"roundedCornerSW.ply": &bintree{roundedcornerswPly, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


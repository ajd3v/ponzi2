// Code generated by go-bindata.
// sources:
// data/Inconsolata-Bold.ttf
// data/Inconsolata-Regular.ttf
// data/OFL.txt
// data/Open Font License.markdown
// data/Orbitron Black.ttf
// data/Orbitron Bold.ttf
// data/Orbitron Light.ttf
// data/Orbitron Medium.ttf
// data/meshes.obj
// data/shader.frag
// data/shader.vert
// data/texture.png
// DO NOT EDIT!

package ponzi

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// inconsolataBoldTtf reads file data from disk. It returns an error on failure.
func inconsolataBoldTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Inconsolata-Bold.ttf"
	name := "Inconsolata-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// inconsolataRegularTtf reads file data from disk. It returns an error on failure.
func inconsolataRegularTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Inconsolata-Regular.ttf"
	name := "Inconsolata-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// oflTxt reads file data from disk. It returns an error on failure.
func oflTxt() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\OFL.txt"
	name := "OFL.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// openFontLicenseMarkdown reads file data from disk. It returns an error on failure.
func openFontLicenseMarkdown() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Open Font License.markdown"
	name := "Open Font License.markdown"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// orbitronBlackTtf reads file data from disk. It returns an error on failure.
func orbitronBlackTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Orbitron Black.ttf"
	name := "Orbitron Black.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// orbitronBoldTtf reads file data from disk. It returns an error on failure.
func orbitronBoldTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Orbitron Bold.ttf"
	name := "Orbitron Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// orbitronLightTtf reads file data from disk. It returns an error on failure.
func orbitronLightTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Orbitron Light.ttf"
	name := "Orbitron Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// orbitronMediumTtf reads file data from disk. It returns an error on failure.
func orbitronMediumTtf() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\Orbitron Medium.ttf"
	name := "Orbitron Medium.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// meshesObj reads file data from disk. It returns an error on failure.
func meshesObj() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\meshes.obj"
	name := "meshes.obj"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// shaderFrag reads file data from disk. It returns an error on failure.
func shaderFrag() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\shader.frag"
	name := "shader.frag"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// shaderVert reads file data from disk. It returns an error on failure.
func shaderVert() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\shader.vert"
	name := "shader.vert"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// texturePng reads file data from disk. It returns an error on failure.
func texturePng() (*asset, error) {
	path := "D:\\work\\go\\src\\github.com\\btmura\\ponzi2\\internal\\ponzi\\data\\texture.png"
	name := "texture.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Inconsolata-Bold.ttf": inconsolataBoldTtf,
	"Inconsolata-Regular.ttf": inconsolataRegularTtf,
	"OFL.txt": oflTxt,
	"Open Font License.markdown": openFontLicenseMarkdown,
	"Orbitron Black.ttf": orbitronBlackTtf,
	"Orbitron Bold.ttf": orbitronBoldTtf,
	"Orbitron Light.ttf": orbitronLightTtf,
	"Orbitron Medium.ttf": orbitronMediumTtf,
	"meshes.obj": meshesObj,
	"shader.frag": shaderFrag,
	"shader.vert": shaderVert,
	"texture.png": texturePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Inconsolata-Bold.ttf": &bintree{inconsolataBoldTtf, map[string]*bintree{}},
	"Inconsolata-Regular.ttf": &bintree{inconsolataRegularTtf, map[string]*bintree{}},
	"OFL.txt": &bintree{oflTxt, map[string]*bintree{}},
	"Open Font License.markdown": &bintree{openFontLicenseMarkdown, map[string]*bintree{}},
	"Orbitron Black.ttf": &bintree{orbitronBlackTtf, map[string]*bintree{}},
	"Orbitron Bold.ttf": &bintree{orbitronBoldTtf, map[string]*bintree{}},
	"Orbitron Light.ttf": &bintree{orbitronLightTtf, map[string]*bintree{}},
	"Orbitron Medium.ttf": &bintree{orbitronMediumTtf, map[string]*bintree{}},
	"meshes.obj": &bintree{meshesObj, map[string]*bintree{}},
	"shader.frag": &bintree{shaderFrag, map[string]*bintree{}},
	"shader.vert": &bintree{shaderVert, map[string]*bintree{}},
	"texture.png": &bintree{texturePng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


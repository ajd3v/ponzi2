// Code generated by go-bindata.
// sources:
// data/meshes.obj
// data/shader.frag
// data/shader.vert
// data/texture.png
// DO NOT EDIT!

package ponzi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _meshesObj = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8e\xbf\x0e\x82\x30\x18\xc4\xf7\x3e\xc5\x25\x0c\xe8\x60\x4b\x81\xc4\x3f\x23\x83\x83\x8b\xbe\x82\xc4\x0f\x31\x41\x9a\xb4\x08\xaf\x6f\xb1\x2d\x68\x34\x7e\x4b\xaf\xbf\xbb\x6b\xbf\x08\x45\x43\xed\x85\x34\xfa\x94\xaf\x37\x58\x98\x47\x89\x64\x89\x63\x71\xc0\xfe\xd6\xd0\x0e\xf1\x9d\x4c\x4d\x86\x97\x63\x2e\x66\x11\x86\x61\x70\x17\xd2\x5c\xe9\x2b\x53\x50\xba\xab\xd5\xa9\x39\xb7\xc4\x7a\x24\x3c\x79\xcd\x2c\x56\x41\x59\x57\xfe\x75\x27\xf8\x15\x7b\xaf\xfe\x30\x3b\xab\xb7\x76\x1c\x92\x0e\x8c\xca\xf3\x0f\x30\x27\x7c\xc5\x25\x5a\xff\x5e\xd8\xc8\xff\xc3\x0c\x54\x55\xb1\x0a\xa9\x90\x42\x22\x13\xf6\x84\x14\x99\x90\x13\xcb\x45\x1e\x1c\xf6\x0c\x00\x00\xff\xff\xa3\x45\x54\xb4\x51\x01\x00\x00")

func meshesObjBytes() ([]byte, error) {
	return bindataRead(
		_meshesObj,
		"meshes.obj",
	)
}

func meshesObj() (*asset, error) {
	bytes, err := meshesObjBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meshes.obj", size: 337, mode: os.FileMode(420), modTime: time.Unix(1482475191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shaderFrag = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x4e\xc4\x20\x10\x86\xcf\xf2\x14\x93\x78\xa1\xa6\xd9\xec\xd6\xf5\xd4\x78\x30\xbb\x57\x1f\x02\xbb\xb4\x4e\x02\x8c\x99\xa5\xcd\x1a\xe3\xbb\x3b\x14\x8a\x89\xf1\x36\xc0\xf7\xfd\xf3\x73\xbf\x58\xbe\x22\x05\x38\x3e\xed\x61\x20\xb6\x4a\x39\xf3\x49\x73\xd4\x8e\x06\x13\xd3\xcb\x33\x1c\xf6\x0d\xcc\x01\x47\x62\x0f\x57\xe3\x3f\x9c\xe5\xee\x0c\xd1\xde\xe2\xcc\xb6\xff\x4f\x38\xfc\x0a\xa3\x23\x13\x25\xda\x11\xbf\xe2\xed\xc5\xd3\x1c\x62\xaf\x14\x06\x58\xec\xd0\xa5\x94\x13\x11\x5f\xfa\x72\x73\xcc\xe8\x76\x7c\x04\x87\xd3\x7b\xc4\x30\x89\x23\x5b\x32\x32\xb2\x99\x4e\x19\x53\x0b\xe1\x05\xbc\xc1\xa0\xd3\xd4\xc0\x97\xba\x5b\x99\x35\x58\x10\xa9\x53\x9a\x76\x67\x5d\xa6\xb6\xae\x6d\xfa\x82\x7b\xac\xb8\x8c\x7a\xb3\xdb\x5c\xa7\xfd\xf3\x81\xa4\xd5\x12\xa2\xa4\x08\xbd\x45\xec\x78\x7a\x83\x87\x5a\xbc\xad\xd9\x3b\x23\xde\xf7\x4f\x00\x00\x00\xff\xff\x63\x46\xc3\x20\x73\x01\x00\x00")

func shaderFragBytes() ([]byte, error) {
	return bindataRead(
		_shaderFrag,
		"shader.frag",
	)
}

func shaderFrag() (*asset, error) {
	bytes, err := shaderFragBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shader.frag", size: 371, mode: os.FileMode(420), modTime: time.Unix(1483000364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shaderVert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xcb\x4e\xeb\x30\x10\x86\xd7\xc9\x53\x8c\x74\x36\xc9\xa1\xaa\xd2\x36\xe5\x22\xc4\xaa\x5b\x40\x2c\x50\xb7\xc8\x24\x6e\x19\xe4\x78\x90\xeb\x96\x14\xc4\xbb\x33\x8e\x93\x26\x6a\x5d\x56\x71\xc6\xff\xf7\x7b\x6e\xff\x76\xd2\x6c\x90\x34\xe4\xf3\x0c\x0a\x32\x32\x8e\x95\xd8\xd3\xd6\x26\x8a\x0a\x61\xdd\xcd\x1d\x64\x29\x6c\x35\xae\xc8\x54\x50\x09\x9b\xc3\x87\xa1\x77\x59\xb8\xcb\x25\xca\xcf\x07\x61\x0d\xd6\xb7\x01\x6e\x72\xc4\x55\x54\x4a\x75\x5e\x3e\x3d\x92\x6b\x3e\x89\x83\x3e\x00\xcc\x7a\x60\x27\x8b\x19\x88\xea\x15\xa5\xb6\xf7\xb8\x7e\xb3\x0b\x52\x64\x42\xaf\xe4\x47\x50\x89\xc6\xd7\x22\xd4\xdf\xe0\xfc\x3c\xb8\xe4\x83\x83\x02\xd4\x65\x0a\xa8\x1d\xc0\x6d\xa3\x0d\xba\x68\xc8\xfc\xaa\x97\xf9\xb2\x43\xa2\xeb\x4e\x34\xe5\xef\xb3\xac\x17\x44\xa6\x0c\x09\x6f\x7a\x37\xd4\x6d\x41\x31\x6b\x3c\x6b\x0f\x64\x1b\xca\x79\xf2\x8d\xa6\xfd\x9f\x81\x72\x9d\x40\xbd\x66\x6c\x47\x58\xf2\x3c\x50\x27\xee\x94\xc2\x77\x1c\xad\xd5\xcb\x53\x5b\x0b\x3f\x16\xda\x06\xf8\x3f\x1c\x36\xff\xf5\xb5\xc7\x51\xf7\x3e\xb3\xc3\x32\xa2\x26\x89\x26\xd8\xa5\x1c\x35\xc9\x59\x23\xf4\xc6\xf5\x5d\x96\x8f\x4d\x6f\x58\x33\xdc\x0d\xb6\x77\xba\xc4\xc7\xc6\xf5\xfe\x6b\x04\x93\x71\x96\xb2\xe5\x4a\x91\xb0\xc3\x49\x31\x5a\x89\x3a\x29\xc9\x26\x27\xb6\x9e\x3c\x19\x6b\x3a\x82\xcc\xbb\x75\x5d\x61\x93\x93\x55\x83\x0b\x48\x82\xab\xc4\xd9\x0d\xe2\x6c\xf3\xf3\x1b\x00\x00\xff\xff\x33\xf6\x94\x00\x74\x03\x00\x00")

func shaderVertBytes() ([]byte, error) {
	return bindataRead(
		_shaderVert,
		"shader.vert",
	)
}

func shaderVert() (*asset, error) {
	bytes, err := shaderVertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shader.vert", size: 884, mode: os.FileMode(420), modTime: time.Unix(1483000364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturePng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x0d\x20\xcc\xc1\x06\x24\x0f\xdb\x25\x9e\x66\x60\x60\x34\xf2\x74\x71\x0c\xa9\xb8\xf5\xf6\x4e\x20\x6f\xb3\x81\x44\xeb\xc5\xdb\x4b\x85\xd2\x18\x44\x27\x9b\xac\xae\x70\x64\x31\x3e\x70\x78\xd2\xc4\x8f\x97\xe7\x25\x33\x70\xc5\x9f\x62\xce\xbd\x3d\xef\x4d\x62\x14\x7f\xbf\x03\x03\x07\x03\xa3\x02\x03\x4b\x03\x83\x00\x03\x13\x61\xce\x01\xdf\x2f\x5e\xe6\x97\xd5\xea\x25\xd7\xab\xac\x96\xc4\xae\x76\xf9\x8b\xc5\x3c\x4f\x6c\x0f\x48\x4c\xe3\x5e\x77\x53\x4b\x56\xfc\xff\xe9\x2a\x86\xf4\x7b\xbf\x59\x30\x4c\x5a\x98\x58\xc7\x16\x7a\x3f\x7c\x87\x6a\xe5\x2c\x46\x1c\xd6\xfd\x4b\x9e\xf1\x95\xe1\x1b\x1b\x4e\x79\x08\x07\x85\x3f\xc3\x65\xe5\xde\xc6\x6f\xdf\x67\xe2\xd7\x02\x77\xc4\x77\xbb\x93\xdb\xb9\xba\xe7\xbe\x08\x9e\x00\x0c\x44\x06\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\x5f\x3b\xfc\xe5\x6b\x01\x00\x00")

func texturePngBytes() ([]byte, error) {
	return bindataRead(
		_texturePng,
		"texture.png",
	)
}

func texturePng() (*asset, error) {
	bytes, err := texturePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "texture.png", size: 363, mode: os.FileMode(420), modTime: time.Unix(1481262482, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meshes.obj": meshesObj,
	"shader.frag": shaderFrag,
	"shader.vert": shaderVert,
	"texture.png": texturePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meshes.obj": &bintree{meshesObj, map[string]*bintree{}},
	"shader.frag": &bintree{shaderFrag, map[string]*bintree{}},
	"shader.vert": &bintree{shaderVert, map[string]*bintree{}},
	"texture.png": &bintree{texturePng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


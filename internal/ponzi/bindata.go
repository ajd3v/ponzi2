// Code generated by go-bindata.
// sources:
// data/buttonTexture.png
// data/meshes.obj
// data/texture.png
// DO NOT EDIT!

package ponzi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buttontexturePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x68\x00\x61\x0e\x36\x06\x06\x86\xc3\x76\x89\xa7\x19\x18\x18\x59\x3d\x5d\x1c\x43\x2a\x6e\xbd\xbd\x73\x90\xb7\xc1\x80\x87\x61\xa3\xdc\xef\xf7\x32\x6e\x0e\x7b\xb4\xba\xf6\x3a\x5c\x7d\x31\x25\x3d\x8a\x7d\xc6\xcc\x9b\x5f\xcb\xae\x4e\x4f\x2f\xd7\xad\xf3\x65\x60\x72\x60\xe0\x60\x60\x54\x60\x60\x69\x60\x10\xa0\x88\x53\x96\xf9\x7c\x6d\x6d\x0e\x19\x5a\x3f\xac\x11\xb6\xdb\xf8\xf9\x84\xeb\x54\x5e\x4a\x9d\x00\xe7\x34\x7c\xcf\xfb\xb9\x82\xe7\x57\x12\xe7\x8d\x7e\x06\x06\x06\x06\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\xea\x8c\x6d\x74\x3e\x01\x00\x00")

func buttontexturePngBytes() ([]byte, error) {
	return bindataRead(
		_buttontexturePng,
		"buttonTexture.png",
	)
}

func buttontexturePng() (*asset, error) {
	bytes, err := buttontexturePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buttonTexture.png", size: 318, mode: os.FileMode(438), modTime: time.Unix(1498263928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _meshesObj = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x8e\x82\x30\x14\x45\xf7\xfd\x8a\x9b\xb0\x60\x66\x31\x6d\x1f\x90\xcc\x74\x96\x2c\x5c\xb8\xd1\x5f\x90\xf8\x10\x13\xa4\x49\x8b\xf0\xfb\x06\x5b\x40\xa3\xb1\xab\xdb\x73\xcf\x6b\x5f\x82\xb2\xe5\xee\xc8\x0e\x43\x26\x7f\xff\xf0\xe5\xaf\x15\xf4\x37\x76\xe5\x16\x9b\x73\xcb\xff\x48\x2f\xec\x1b\xf6\xb2\x9a\xbc\x54\x24\x18\xc7\x31\x5c\xd8\x49\xeb\x4e\xc2\xc2\xba\xbe\xb1\xfb\xf6\xd0\xb1\x18\xa0\xa5\xbe\x9f\x35\xfc\xcc\x49\x0c\xa0\x8f\xed\x02\x5f\xb4\xc7\xd1\x37\x65\x0f\x2d\x8d\x31\x26\x20\x0a\x60\x4a\x91\x3f\x81\xd5\x88\x23\xc1\xe8\xe2\x7b\xf3\x46\xf1\x1f\xe1\x61\xeb\x5a\xd4\xc8\x14\x29\x42\xae\x32\x45\x20\x95\x2b\x5a\x58\xa1\x8a\xb9\x11\xb7\x00\x00\x00\xff\xff\xa3\x45\x54\xb4\x51\x01\x00\x00")

func meshesObjBytes() ([]byte, error) {
	return bindataRead(
		_meshesObj,
		"meshes.obj",
	)
}

func meshesObj() (*asset, error) {
	bytes, err := meshesObjBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meshes.obj", size: 337, mode: os.FileMode(438), modTime: time.Unix(1486247557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _texturePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x68\x00\x61\x0e\x36\x06\x06\x86\xc3\x76\x89\xa7\x19\x18\x18\x8d\x3c\x5d\x1c\x43\x2a\x6e\xbd\xbd\x13\xc8\xdb\x6c\x20\xd1\x7a\xf1\xf6\x52\xa1\x34\x06\xd1\xc9\x26\xab\x2b\x1c\x59\x8c\x0f\x1c\x9e\x34\xf1\xe3\xe5\x79\xc9\x0c\x5c\xf1\xa7\x98\x73\x6f\xcf\x7b\x93\x18\xc5\xdf\xef\xc0\xc0\xc1\xc0\xa8\xc0\xc0\xd2\xc0\x20\xc0\xc0\x44\x98\x73\xc0\xf7\x8b\x97\xf9\x65\xb5\x7a\xc9\xf5\x2a\xab\x25\xb1\xab\x5d\xfe\x62\x31\xcf\x13\xdb\x03\x12\xd3\xb8\xd7\xdd\xd4\x92\x15\xff\x7f\xba\x8a\x21\xfd\xde\x6f\x16\x0c\x93\x16\x26\xd6\xb1\x85\xde\x0f\xdf\xa1\x5a\x39\x8b\x11\x87\x75\xff\x92\x67\x7c\x65\xf8\xc6\x86\x53\x1e\xc2\x41\xe1\xcf\x70\x59\xb9\xb7\xf1\xdb\xf7\x99\xf8\xb5\xc0\x1d\xf1\xdd\xee\xe4\x76\xae\xee\xb9\x2f\x82\x27\x30\x30\x30\x30\x78\xba\xfa\xb9\xac\x73\x4a\x68\x02\x04\x00\x00\xff\xff\x5f\x3b\xfc\xe5\x6b\x01\x00\x00")

func texturePngBytes() ([]byte, error) {
	return bindataRead(
		_texturePng,
		"texture.png",
	)
}

func texturePng() (*asset, error) {
	bytes, err := texturePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "texture.png", size: 363, mode: os.FileMode(438), modTime: time.Unix(1486247557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"buttonTexture.png": buttontexturePng,
	"meshes.obj": meshesObj,
	"texture.png": texturePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"buttonTexture.png": &bintree{buttontexturePng, map[string]*bintree{}},
	"meshes.obj": &bintree{meshesObj, map[string]*bintree{}},
	"texture.png": &bintree{texturePng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


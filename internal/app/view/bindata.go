// Code generated by go-bindata.
// sources:
// data/addButton.png
// data/errorIcon.png
// data/refreshButton.png
// data/removeButton.png
// data/roundedCornerNWEdges.ply
// data/roundedCornerNWFaces.ply
// data/squarePlane.ply
// DO NOT EDIT!

package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _addbuttonPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x70\x00\x61\x0e\x36\x06\x06\x86\x55\x99\x85\xf7\x18\x18\x18\x0a\x3d\x5d\x1c\x43\x2a\x6e\xbd\xbd\x79\x91\xf3\x80\x02\x8f\x83\xe3\xe3\x7f\xd6\xc7\x79\x59\x1c\x27\xf5\xdf\x89\x5e\xf0\x6d\xc5\x82\x97\x51\x93\x54\x3c\x27\xa9\x89\x5d\xe5\x3f\x73\x66\x8f\x9e\xc6\xa2\x12\xdf\xea\x5f\xe2\x0c\xa8\xe0\x0c\xb3\xdd\x9d\xe7\xb7\xe3\x5f\x14\xce\x4b\xe0\x86\x88\x3c\x6f\xd8\xf5\x47\x7c\x03\x2b\xaa\xb2\x06\x15\xcf\x49\x2a\x5b\x4b\x18\x3a\x78\x79\xfc\x22\x99\x6f\xe6\x83\xc4\x3c\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\xb2\x0c\x4b\x45\xaa\x00\x00\x00")

func addbuttonPngBytes() ([]byte, error) {
	return bindataRead(
		_addbuttonPng,
		"addButton.png",
	)
}

func addbuttonPng() (*asset, error) {
	bytes, err := addbuttonPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "addButton.png", size: 170, mode: os.FileMode(438), modTime: time.Unix(1509818038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _erroriconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x70\x00\x61\x0e\x36\x06\x06\x86\x55\x99\x85\xf7\x18\x18\x98\x54\x3c\x5d\x1c\x43\x2a\x6e\xbd\x9d\xbe\xd7\x8f\xc9\x51\xa4\xf5\xfd\xbd\x88\x88\x49\xa6\x66\x53\xd8\x9c\x52\x75\x32\x72\x7c\xc4\xe6\x3b\xca\x37\xab\xdf\x38\x94\x5b\xc1\x24\x14\xe7\xc4\x3d\xdf\x41\x5d\xd1\x30\x20\x40\x40\x5b\x5a\x5b\x55\x2b\xf0\x23\x7b\xfd\x02\x09\x6e\x13\x25\x23\x97\x82\xef\x67\x34\xbe\xaf\x36\x3b\xd3\xd6\x58\x7d\x6e\x6f\x7a\x9b\x87\x00\x8b\x23\x18\x31\xf6\xac\x13\x63\x8e\xd5\x65\x33\xab\x3f\xdc\x74\x95\x2b\x46\xe6\xed\x1e\xfb\x95\x3f\x43\xf6\x3b\x45\x85\x7b\xdc\x2e\x61\xb4\x5e\xf0\xef\xfa\xf3\x4a\x8d\x86\x75\x62\xcc\x59\xe6\x76\xa1\xf9\xe6\x6b\xce\x32\x6d\x5b\xb7\x2f\x55\x7c\x43\xe9\x57\xdd\xdd\x0d\x73\x03\xee\x2f\xe2\xbe\xc1\xf9\x55\x77\x57\xc3\xdc\xc0\xfb\x93\xb8\x6f\x48\x7e\xd5\xdd\xd9\x30\x37\xe8\x7e\x63\xb1\xe3\xa7\xe5\xfb\xaa\x5e\x48\xdf\x5f\xdd\x6e\xf7\xab\xe4\x44\xc1\xd7\xdf\xfe\x92\x8f\xab\xff\x1e\xd7\xb9\xc5\xca\xf3\xfe\xef\x3f\xe7\x6f\xee\xac\x0c\x67\x99\xda\xbe\xd7\xbd\x3f\xf7\xa6\xe1\x5e\x2d\x9b\x2d\xb7\xc4\x2a\x3b\xc1\x8b\xa7\x7b\x77\x32\x2c\xce\x66\x10\x37\x08\xa9\x55\x5a\xf4\x5c\xbb\x98\xdb\x26\x3e\xed\x62\xe7\x81\x80\xaf\x9d\x1d\xbb\xd2\x9f\x31\x95\x9c\x37\x7e\x51\xcc\xe8\x7c\x55\x5d\xa9\x6a\xef\xd7\xe3\xae\x0b\xd7\xb5\xdb\xed\xbd\xf7\x0b\x2c\x34\x5f\xa4\xf5\x30\x27\x43\x09\x84\x35\x99\x6b\xc2\x02\x6e\x89\x75\xfb\x34\xb9\xdc\x95\x05\x9e\x30\xb5\xad\xce\xef\x3a\xe4\xf9\x71\x06\x54\xec\xb8\xab\xc2\x01\x56\x9e\xf0\xfb\x22\xad\x8f\x95\x04\x1e\x30\xe9\x87\x7d\xed\x3f\xdd\x3e\xe1\xf4\xd5\xac\x8d\x0f\x72\xa7\x4c\x8d\xe6\x73\xb8\xf7\x30\xf9\x4e\xf7\xc2\xbd\xf2\xe2\x86\xe7\x98\xfe\x15\xbf\x3a\xbe\x67\x79\xfa\xd2\xef\xc1\x3b\xd5\x96\x36\x77\x88\x4d\xe7\x63\x13\xac\xd8\xeb\xa9\x2b\x1a\xf8\x3c\x85\xd7\x96\x5b\xec\x81\xd7\x92\x22\xdf\xa8\x9b\x5c\x7b\xbe\x06\xa5\xbf\xb8\x5c\x1b\xcb\x2d\x3a\xf7\xdd\xca\x95\x5d\x06\x37\xa2\x23\xb3\x1b\x67\x56\xd9\xcb\xba\x28\xd7\xd7\x25\x1c\xfd\x1a\xd4\x7e\xc9\xb1\x65\x1e\x2b\xcf\xfb\xc3\xfc\xb7\xfd\x77\x4f\xbb\xa0\x93\xb0\xe2\x17\x9f\x1a\x93\xf3\xd5\xff\x12\x15\x9b\xd7\xa8\x82\x1c\x79\x3f\x68\xe2\xba\xd6\x95\xf9\xf7\x23\xb9\x83\xaf\x04\x09\xde\x62\x35\x3e\xba\xe0\xde\x59\xf9\x7f\xa7\xfe\x15\x1e\x7d\x60\x70\xba\xf2\x69\xae\x39\x57\xa7\x38\x43\xd5\x33\xf6\x3b\x82\x12\x37\xf3\xeb\x5f\xf6\x29\x70\x34\x81\xd1\xa1\xff\xcf\x78\xcf\xcd\x2d\xcf\xf5\xf9\xbd\x5e\x81\x81\x81\x81\xc1\xd3\xd5\xcf\x65\x9d\x53\x42\x13\x20\x00\x00\xff\xff\x87\x62\x52\x7b\x5d\x02\x00\x00")

func erroriconPngBytes() ([]byte, error) {
	return bindataRead(
		_erroriconPng,
		"errorIcon.png",
	)
}

func erroriconPng() (*asset, error) {
	bytes, err := erroriconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errorIcon.png", size: 605, mode: os.FileMode(438), modTime: time.Unix(1509818038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _refreshbuttonPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xaf\x02\x50\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x40\x00\x00\x00\x40\x08\x06\x00\x00\x00\xaa\x69\x71\xde\x00\x00\x02\x76\x49\x44\x41\x54\x78\xda\xed\x9a\xbf\x6f\x13\x31\x14\xc7\xed\xd2\x22\x06\x60\x0a\x91\xda\x8a\xa9\x52\x3b\x32\x64\x6c\x86\xec\x0c\xfd\x1f\xb2\xf4\x8f\x28\x03\x53\xa5\x8c\x0c\x27\x66\x24\xf6\x92\x25\x1b\xa8\x03\x5d\xa8\x3a\x30\x86\x09\x65\xa8\xc4\x14\x55\x6c\xfc\xd0\x87\xa1\xae\x74\x0a\x77\xbe\xb3\xe3\x73\x9d\xcb\xfb\x48\x5d\xf2\xd2\xe7\xf7\xbe\x79\xf6\xd9\xcf\xa7\x94\x20\x08\x82\x20\x08\x42\x24\x80\x37\x80\x5e\x67\x01\x00\xde\x01\x9b\xeb\x2c\x00\xc0\x07\xe0\xd1\x3a\x0b\x00\xf0\x09\x78\xba\x2e\x89\xf7\x81\x57\xfc\xcf\x14\x78\xd6\xd6\xa4\xf7\x80\x11\x30\xc3\xce\x0c\x78\xde\xa6\xc4\xbb\x40\x86\x1b\x3f\x80\xfd\x12\x7f\x2f\x81\xee\xaa\x24\x3f\x04\xe6\xf8\x31\x07\x5e\x2c\xf8\x7b\x9d\xb3\x0d\x53\x4f\x3e\x63\x39\xbe\x03\xbb\x39\x7f\x83\x82\xef\x64\xa9\x26\x7f\xb6\x64\xf2\x53\xa0\x53\x91\xfc\x1d\x67\x6d\x4b\xfe\x6b\xfe\x71\x58\x91\x7c\x5a\x22\x38\x96\xfd\x97\x82\xcf\x3e\x02\x8f\x73\xfe\x7a\x0e\xfe\xb2\x14\x16\xbc\x3a\x4c\x80\x41\xc1\x46\x68\x5c\xb4\x1b\x34\x15\x30\xa9\xe9\x7b\x78\x5f\xc9\x77\x6b\xae\xf6\xc7\x25\x3b\xc1\xf7\x55\xe7\x01\xe0\xb8\xe6\x93\xa3\x9b\x62\xe9\xdf\xdc\xfd\xea\x05\x02\xbc\x05\x36\x6a\x8e\x33\x30\xbe\xd2\x99\x0a\x66\x87\x57\xc5\xa0\xe4\x7f\x4f\x3d\xc6\xab\xb3\x28\xee\xc5\x14\x60\xe4\x52\xf6\x81\xc6\xac\x9a\x0e\xa3\x98\x02\xd8\xf6\xf6\x93\x06\xc7\xb5\x2d\x8c\xb3\x98\xa7\x3a\xe7\xd2\x0f\x34\x76\xd5\x54\xe8\xbb\xfa\xdc\xf0\x88\xc3\x96\xe0\xa5\xd6\xfa\xbc\x29\x01\x8c\xef\x4b\xcf\xd8\x82\x09\xd0\xb3\xd8\xc6\x11\x8a\x70\xec\x19\x5b\x30\x01\xf6\x2d\xb6\x8b\x08\x02\x5c\x78\xc6\x16\x4c\x80\x1d\x8b\x6d\x1a\x41\x80\xa9\x67\x6c\xc5\xd3\xca\x63\x21\xfa\xa3\x94\x7a\x50\x62\x7e\xa8\xb5\xfe\xdd\xf0\x22\xbc\xa5\x94\xfa\x55\x62\xfe\xab\xb5\xde\x6c\xba\x02\x5a\x85\x8f\x00\x3f\x2d\xb6\x4e\x84\x98\x3b\x9e\xb1\x05\x13\xe0\xda\x62\x3b\x88\x20\xc0\x81\x67\x6c\xc1\x04\xf8\x66\xb1\x1d\x46\x10\xe0\xd0\x33\xb6\x60\x02\x5c\x59\x6c\x47\x11\x04\x38\xf2\x8c\x4d\xb6\xc2\x72\x18\x92\xe3\x70\x02\x0d\x91\x86\x4a\x3f\x6e\x43\x64\x99\x96\x98\x67\xf2\x37\xc9\x75\x87\x7d\x9b\xa2\x81\xcb\xfe\xfe\x9a\xa2\x26\x40\xe7\xb6\xb8\xc3\xaf\x9e\x76\x5b\xdc\x61\x2a\x2c\x5e\x8c\x9c\x98\x04\xb7\x81\x2d\xf3\xb7\x6d\x3e\x3b\x29\xb9\x3c\x49\xf3\x62\x24\x27\xc2\xb2\x57\x63\x3e\xb4\xee\x7e\x70\x75\x93\xf7\x9c\x0e\xbe\xa4\x79\x3d\xbe\xb0\x30\xce\x1b\x48\x3c\xfd\x17\x24\x16\x1e\x91\x21\xab\x21\x5b\x99\x57\x64\x0a\x76\x8c\x75\x5e\x92\x2a\x7b\x71\x6a\xd4\xf4\x0e\x4f\x47\x14\xa3\xaf\x6e\xfb\xf6\x3d\x75\xdb\xbd\xdd\x51\x4a\x3d\xc9\x75\x72\xae\xcd\x79\xfe\x4a\x29\x75\xae\xb5\xfe\xac\x04\x41\x10\x04\x41\x10\x04\x41\x10\x1a\xe2\x1f\xf7\x1d\xeb\x14\xce\xff\xde\xa0\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xd8\x7b\x83\xa1\xaf\x02\x00\x00")

func refreshbuttonPngBytes() ([]byte, error) {
	return bindataRead(
		_refreshbuttonPng,
		"refreshButton.png",
	)
}

func refreshbuttonPng() (*asset, error) {
	bytes, err := refreshbuttonPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "refreshButton.png", size: 687, mode: os.FileMode(438), modTime: time.Unix(1509818038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _removebuttonPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x12\x02\xed\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x40\x00\x00\x00\x40\x08\x06\x00\x00\x00\xaa\x69\x71\xde\x00\x00\x01\xd9\x49\x44\x41\x54\x78\xda\xed\x9a\x4d\x6e\xc2\x30\x10\x85\x9f\x81\x2d\xe7\xa0\xea\xb2\x12\x08\x24\xd6\xec\xb8\x40\xa5\xde\xa0\x0b\x84\x38\x65\xab\xde\xa0\xeb\x72\x06\x88\xe0\x75\xd1\x20\x45\x08\x90\xed\x38\x63\x4f\x3a\xdf\x3a\xc2\xf3\x3e\x3b\x0e\xfe\x01\x0c\xc3\x30\x0c\xc3\x30\x0c\xc3\x88\x85\xe4\x28\x43\x9b\xc3\x14\xbf\x33\x48\x50\xc8\x18\xc0\x3b\xc9\x85\x60\xf8\x15\x80\xd7\xba\xed\xac\x3d\x3f\x26\xb9\xe5\x1f\x5f\x24\xd7\x02\x6d\xae\xeb\xb6\x7e\x48\xee\xb2\x49\xa8\xc3\xef\xea\x42\x28\x21\xa1\x11\xfe\x42\x1e\x09\x77\xc2\x77\x2a\xe1\x46\xf8\x3c\x12\xae\x86\xfd\x3d\x92\x4a\x78\x10\xbe\x29\x61\x2b\x32\xdb\x93\xdc\xd0\x8f\x24\x12\x3c\xc2\x37\x25\xbc\xa5\xfa\x3a\x3c\x2a\x68\xe1\x59\x10\x49\x1e\x49\xce\x5a\xb4\x35\x25\x79\x08\x10\xbe\x92\x7a\x0d\xd6\x01\x12\xa2\x46\x82\x44\x1b\xc5\x4a\x28\x3e\x7c\x64\xa1\x5e\xaf\x43\xc4\xb0\xcf\x13\xbe\x8b\xde\x52\xd3\xf3\x5d\x14\xae\x36\x7c\x8a\x00\xea\xc3\xb7\x09\xd2\x9b\xf0\x0d\x09\xb3\x7a\xc2\xf3\xa1\x0a\x78\xf6\x40\x72\xaa\x65\x7f\x20\xa4\x57\xfb\xd1\xf3\x1d\x4a\xd0\x17\x3e\xa1\x04\xbd\xe1\x13\x48\xd0\x1f\xfe\x4a\xc2\x77\x40\xf8\x23\xc9\x89\x44\x6d\x83\x42\x9d\xb9\xf3\xf9\xec\xfa\xd2\xfb\x21\xff\xed\x93\x2d\xa5\xb5\x87\xd7\x2f\x21\x41\x78\xbd\x12\x3a\xf8\x23\xa4\x47\x42\xc4\x1e\x41\xd5\x1b\x09\x81\xe1\x0f\x24\x27\xa7\xd3\xe9\x29\x60\x3d\x50\xae\x84\x88\xf0\xd3\xc8\x05\x54\x79\x12\x02\x27\xbc\x9b\xab\x3a\xb5\x12\x52\x84\x57\x2b\x21\x65\x78\x75\x12\xda\xbc\xf3\xea\x25\xfc\xeb\x83\x11\x92\xf3\x80\x6f\x77\xab\x6d\xac\xc0\x91\x10\x75\x34\x16\xb3\x1a\x9c\x03\xf0\xb9\x12\x73\x04\xb0\x74\xce\x7d\x46\x2f\x09\x9d\xfb\x00\xb0\x04\x50\x79\x3c\xfe\x02\xe0\x59\x62\x04\x5c\xee\x06\xec\x0b\x3a\x1e\xdf\x8b\x1c\x8f\x7b\x4a\x90\xbe\x20\xb1\xcf\x7d\x4b\x44\x6c\xeb\xfa\xce\x9c\xb0\x45\x4e\x1a\xb7\x45\x2a\x89\x7d\xfb\x5a\x42\x55\x44\xf8\x46\x51\x1b\x92\x73\xc1\xf6\x16\x24\x37\x25\xad\x05\x86\x19\xda\x1c\xc1\x30\x0c\xc3\x30\x0c\xc3\x30\x8c\x58\x7e\x01\xbd\x24\xdd\xf9\xa8\xbe\x68\xf8\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xe0\xcc\x09\x88\x12\x02\x00\x00")

func removebuttonPngBytes() ([]byte, error) {
	return bindataRead(
		_removebuttonPng,
		"removeButton.png",
	)
}

func removebuttonPng() (*asset, error) {
	bytes, err := removebuttonPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "removeButton.png", size: 530, mode: os.FileMode(438), modTime: time.Unix(1509818038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _roundedcornernwedgesPly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcf\x4e\xc4\x20\x18\xc4\xef\x3c\xc5\xf7\x02\x25\xfc\xab\xab\x67\xef\x5e\x3d\x1a\x2c\xb3\xbb\x4d\x5a\x68\x3e\xa9\xd9\xfa\xf4\xc6\x8d\x62\x43\xf5\xd0\x25\x21\x99\xfc\x98\x19\x3e\x98\x86\x45\x1c\x13\x8f\x3e\x93\x7f\xeb\xfa\x9e\xb4\x54\xa2\x4b\xe3\x88\x98\x89\xd3\x1c\x03\xc2\x63\xe2\x08\x7e\x7a\x96\x5f\x66\x0c\xb8\x9e\xbd\x83\x33\x2e\xd4\x8a\x89\xd3\x04\xce\x0b\x1d\x87\xe4\x33\x5d\x6a\xb0\xd4\xe0\xa3\x06\x71\x93\x89\x9b\x50\x5c\xa5\xe6\xee\xec\x99\x18\xa1\x46\x27\x06\x62\x0d\x5f\x87\x19\x65\x6a\x84\x13\xc8\xfd\x5a\xfa\xf2\x12\xfd\x17\x34\x02\x31\xbc\x9c\xe1\x03\x58\x68\xa9\xae\x8b\x8a\x50\xff\x8b\xe2\x31\x6d\xfb\xb3\x85\x92\xc6\xba\x3b\x6b\x49\xc9\x7b\x77\x38\xb4\x0f\xbb\x1b\x1a\x25\x9d\x76\x46\x3b\x5a\x89\xdd\x15\xdf\x97\x37\xab\x79\x76\x76\x14\xda\xdc\xfe\x19\xa4\x85\x26\x23\x0c\x59\x61\xc9\x7d\x06\x00\x00\xff\xff\x5e\x8a\x14\x69\x89\x02\x00\x00")

func roundedcornernwedgesPlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornernwedgesPly,
		"roundedCornerNWEdges.ply",
	)
}

func roundedcornernwedgesPly() (*asset, error) {
	bytes, err := roundedcornernwedgesPlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerNWEdges.ply", size: 649, mode: os.FileMode(438), modTime: time.Unix(1509818038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _roundedcornernwfacesPly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x41\x8f\xdb\x20\x10\x85\xef\xfc\x8a\xb9\x6d\x2b\xd5\x88\x01\x0c\xb8\xc7\xae\xd4\x63\xaf\x3d\xae\x88\x99\xec\x5a\x72\x20\xc2\xb8\xd9\xf4\xd7\x57\xce\xae\x92\x2c\x49\xa3\x54\xb5\x2f\xe3\xe7\x37\xcf\xdf\xc3\xdb\x71\xcf\xd6\x29\x6f\x7c\x01\x3f\xf5\xc3\x00\xc8\x05\xeb\xd3\x66\x43\xb1\xc0\x63\x26\x5f\x28\xc0\x6a\x0f\xdf\x46\x8a\x81\x32\x48\x6e\x1d\x7c\x9a\xe6\x15\x88\xcf\xd0\xc0\x6e\xb7\xe3\xab\xb7\x57\x3c\xe5\xe7\x2f\x30\xa5\x39\xf7\x04\xeb\x61\xa4\xaf\xf0\x90\xd3\x1c\x03\x85\xc7\x94\x23\xe5\x1f\x3f\xbf\xfb\x9e\xa6\x37\xff\x03\xa3\x91\x0e\x1f\xf9\x45\xb9\xd0\x2b\x38\xb6\xcd\x69\x4b\xb9\xec\x61\x3d\x26\x5f\xe0\xb5\x16\xf6\xb5\xf0\xbb\x16\xe2\xc5\x4e\xbc\x58\x8a\x17\x5b\x53\x2d\x94\x93\x30\xf7\x2f\x3e\x43\xa6\x50\x4b\xcf\x99\x28\xd6\xe2\x6a\x9c\xe9\xd8\x6b\xed\x7b\x02\x7d\xb2\x8c\xc3\x54\xde\x7d\xf3\x70\xec\xfd\x34\xc4\x30\xf4\x34\x31\x8a\xe1\xe9\x85\x7c\xa0\xcc\x1a\xc1\x35\x6a\x89\x1a\xce\x06\x71\xb8\xae\x0c\x78\x52\xd0\xb4\x5d\x8b\x20\xb8\x94\x1a\x9d\x02\xb1\xdc\xec\x68\x68\xf0\xef\x29\xd7\xe2\xac\x30\xce\x99\x65\x30\x2d\xa2\x7b\x8f\x13\x5c\x2a\x6d\x94\x02\xc1\x9d\xb6\xb6\xed\xee\x4c\x13\x42\xa0\x5c\xe0\xb4\x95\xca\x98\x1a\xee\x06\x5b\x73\x1d\xce\xa2\xb4\x8b\xa9\x75\xaa\x55\xff\x00\x77\x35\xae\xeb\x3a\x67\xbb\x33\xcc\xfb\x8f\xee\x76\xde\x87\xb3\x6b\x8e\x58\xcd\x19\xe9\x5d\x81\x1a\x35\x2a\x5d\xf7\x6d\xfe\xff\xe7\x7e\x28\xbc\xe4\x22\x48\xa6\x40\x81\x86\xf6\xf0\x6c\x00\x99\x02\x0b\x08\x86\xfd\x09\x00\x00\xff\xff\xd0\x07\xbe\x21\x2f\x04\x00\x00")

func roundedcornernwfacesPlyBytes() ([]byte, error) {
	return bindataRead(
		_roundedcornernwfacesPly,
		"roundedCornerNWFaces.ply",
	)
}

func roundedcornernwfacesPly() (*asset, error) {
	bytes, err := roundedcornernwfacesPlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "roundedCornerNWFaces.ply", size: 1071, mode: os.FileMode(438), modTime: time.Unix(1509848201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squareplanePly = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8f\x41\x4e\x03\x21\x18\x85\xf7\x9c\xe2\xed\xaa\x89\x9d\x30\xad\x89\xc6\xa5\x5e\xc0\x1b\x34\x0c\xbc\x69\x49\x28\xd4\x1f\xb0\x1d\x4f\x6f\x6c\xcd\xd4\xcc\xec\x2c\x2c\x20\x1f\xef\xe3\xc1\x21\x0c\xaa\x4f\xb2\x37\x05\x26\x5b\xef\xd1\x36\x5a\xd9\xb4\xdf\x33\x16\xbc\x09\x4d\xa1\x43\x37\xe0\x35\x30\x3a\x0a\x56\xcd\xd3\x33\xee\x72\xed\xa0\xef\xb1\xc4\xf1\x78\x6c\xba\xcb\x51\x93\x64\xfb\x80\x9c\xaa\x58\xa2\xf7\x81\x2f\x58\xe4\x8f\x6a\x84\xef\xc1\x44\x5e\x62\x0b\xc5\xc0\xf3\xdd\x9f\x94\xc2\x13\x1e\xd5\x41\xd2\x81\x52\x06\xf4\x21\x99\x82\xd3\x14\x0c\x53\xf0\x35\x05\x71\xe6\xc4\x99\x14\xff\x58\xd5\xee\x8c\x40\xe8\xa6\x68\x2b\x64\x9c\xc2\x2e\x54\x8e\xaf\xee\x8d\x25\x56\xd7\x48\xf0\xb9\xfc\xe6\xaa\x1f\x7f\xb5\xf1\xd1\x79\xcb\xac\x18\xdd\x66\x47\xe3\x28\xaa\x6d\xf4\x79\x60\x39\xee\xf4\x88\xf4\x0c\x5d\x43\x3f\x53\x5d\xa5\xdb\xec\x7f\x95\xdf\xd4\xbd\x86\x46\x8b\xd5\x79\x5d\xa3\x55\xdf\x01\x00\x00\xff\xff\xea\xdb\xf7\x35\x71\x02\x00\x00")

func squareplanePlyBytes() ([]byte, error) {
	return bindataRead(
		_squareplanePly,
		"squarePlane.ply",
	)
}

func squareplanePly() (*asset, error) {
	bytes, err := squareplanePlyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "squarePlane.ply", size: 625, mode: os.FileMode(438), modTime: time.Unix(1509848161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"addButton.png": addbuttonPng,
	"errorIcon.png": erroriconPng,
	"refreshButton.png": refreshbuttonPng,
	"removeButton.png": removebuttonPng,
	"roundedCornerNWEdges.ply": roundedcornernwedgesPly,
	"roundedCornerNWFaces.ply": roundedcornernwfacesPly,
	"squarePlane.ply": squareplanePly,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"addButton.png": &bintree{addbuttonPng, map[string]*bintree{}},
	"errorIcon.png": &bintree{erroriconPng, map[string]*bintree{}},
	"refreshButton.png": &bintree{refreshbuttonPng, map[string]*bintree{}},
	"removeButton.png": &bintree{removebuttonPng, map[string]*bintree{}},
	"roundedCornerNWEdges.ply": &bintree{roundedcornernwedgesPly, map[string]*bintree{}},
	"roundedCornerNWFaces.ply": &bintree{roundedcornernwfacesPly, map[string]*bintree{}},
	"squarePlane.ply": &bintree{squareplanePly, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

